#include "ReversedCharset.h"

void ReversedCharset::displayString(int row, int offset, const char* text, bool clearBackground) {
  row = LCDDisplay::ROW_COUNT - 1 - row;
  offset = LCDDisplay::DISPLAY_WIDTH - 1 - offset;
  
  while (*text) {
    if (*text == ' ') {
      if (clearBackground) {
        display->fillRow(row, offset - 3, 3, 0);
        offset -= 3;
      }
    } else {
      int8_t address = pgm_read_byte(CHAR_LOOKUP_TABLE + *text);
      if (address >= 0) {
        uint8_t buffer[16];
        
        uint16_t lowOffset = pgm_read_word(CHARACTER_OFFSETS + address);
        uint16_t highOffset = pgm_read_word(CHARACTER_OFFSETS + address + 1);
        
        for (int i = 0; i < highOffset - lowOffset; i++) {
          buffer[i] = pgm_read_byte(CHARSET_DATA + lowOffset + i);
        }
        buffer[highOffset - lowOffset] = 0;
        const int dataLen = highOffset - lowOffset + 1;
        
        display->writeRow(row, offset - dataLen, dataLen, buffer);
        offset -= dataLen;
      } else {
        Serial.print("Trying to print character that is not represented in the charset. Char code: ");
        Serial.println(static_cast<int>(*text));
      }
    }
    text++;
  }
}

ReversedCharset :: ReversedCharset(LCDDisplay* display) : display(display) {
}

const uint8_t ReversedCharset::CHARSET_DATA[] PROGMEM = { 0x28, 0x70, 0xa8, 0x50, 0x50, 0x50, 0x50, 0x50, 0x20, 0x50, 0x88, 0x88, 0x50, 0x20, 0x8, 0x8, 0x8, 0x28, 0x2c, 0x88, 0x40, 0x20, 0x10, 0x88, 0x50, 0xa8, 0xa8, 0x50, 0xf8, 0x88, 0x88, 0xf8, 0x70, 0x88, 0x88, 0x70, 0x20, 0x10, 0x20, 0x10, 0x18, 0x20, 0xc0, 0xc0, 0x20, 0x18, 0x20, 0x20, 0x20, 0x20, 0x70, 0x20, 0xc0, 0xc0, 0x0, 0xc0, 0x40, 0xa8, 0x80, 0x40, 0xe8, 0xc, 0x8, 0x50, 0xf8, 0x50, 0xf8, 0x50, 0xa8, 0x70, 0xf8, 0x70, 0xa8, 0xf8, 0x88, 0xf8, 0xf8, 0xa8, 0xe8, 0xf8, 0xa8, 0xf8, 0xc0, 0xa0, 0x98, 0x98, 0xa8, 0x78, 0x90, 0xa8, 0xe8, 0xf8, 0x20, 0xe0, 0x50, 0xa8, 0x88, 0x50, 0xc8, 0xa8, 0x98, 0x48, 0xf8, 0x40, 0x34, 0x3c, 0x2c, 0x30, 0x8, 0x36, 0x28, 0x10, 0x28, 0x30, 0x8, 0x10, 0x8, 0x30, 0x30, 0x8, 0x30, 0x38, 0x8, 0x38, 0x40, 0xf8, 0x40, 0x28, 0x14, 0x20, 0x38, 0x3e, 0x28, 0x38, 0x38, 0x28, 0x3e, 0x38, 0x28, 0x38, 0x38, 0x20, 0x38, 0x38, 0x20, 0x38, 0x20, 0x38, 0x8, 0xf8, 0x28, 0x10, 0xf8, 0xb8, 0x4, 0xb8, 0x38, 0x20, 0xf8, 0x3e, 0x2a, 0x3a, 0xa0, 0xf8, 0x28, 0x38, 0x38, 0xf8, 0x28, 0x38, 0x28, 0x28, 0x38, 0x38, 0x28, 0xf8, 0x38, 0x28, 0x10, 0x88, 0xc8, 0xa8, 0x98, 0xc0, 0x38, 0xc0, 0xd8, 0x20, 0xd8, 0xc0, 0x30, 0x8, 0x30, 0x8, 0x30, 0xc0, 0xc0, 0x30, 0x8, 0x30, 0xc0, 0xf0, 0x8, 0x8, 0xf0, 0x80, 0xf8, 0x80, 0x90, 0xa8, 0xa8, 0x48, 0x48, 0xb0, 0xa0, 0xf8, 0x78, 0x98, 0x88, 0x70, 0x40, 0xa0, 0xa0, 0xf8, 0x70, 0x88, 0x88, 0x70, 0xf8, 0x10, 0x60, 0xf8, 0xf8, 0x40, 0x20, 0x40, 0xf8, 0x8, 0x8, 0xf8, 0x98, 0x60, 0xf8, 0xf0, 0x8, 0x8, 0x10, 0xf8, 0xf8, 0x20, 0xf8, 0x50, 0x98, 0x88, 0xf0, 0x80, 0xa0, 0xf8, 0x88, 0xa8, 0xf8, 0x70, 0x88, 0xf8, 0x50, 0x88, 0x88, 0x70, 0x50, 0xa8, 0xa8, 0xf8, 0x38, 0x50, 0x90, 0x50, 0x38 };
const uint16_t ReversedCharset::CHARACTER_OFFSETS[] PROGMEM = { 0, 4, 8, 11, 14, 17, 18, 19, 24, 26, 28, 30, 32, 34, 36, 40, 43, 46, 49, 52, 53, 56, 60, 61, 62, 63, 68, 73, 76, 79, 82, 85, 88, 91, 94, 98, 102, 104, 107, 110, 113, 118, 121, 124, 127, 129, 131, 134, 137, 140, 143, 148, 150, 153, 155, 156, 159, 162, 164, 167, 170, 173, 176, 179, 183, 186, 189, 196, 201, 205, 208, 212, 216, 220, 224, 228, 232, 237, 240, 243, 247, 248, 251, 255, 258, 261, 264, 268, 272, 277 };
const int8_t ReversedCharset::CHAR_LOOKUP_TABLE[] PROGMEM = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 20, 25, -1, 7, 0, 19, 13, 12, 26, 18, 23, 17, 24, 16, 27, 36, 35, 34, 33, 32, 31, 30, 29, 28, 5, 6, 3, 1, 2, 21, -1, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 11, 15, 10, -1, 4, -1, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 9, -1, 8, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };


